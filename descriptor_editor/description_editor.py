import re
from descriptor_editor.descriptor_func.Remove_emoji import remove_all_emoji
from descriptor_editor.descriptor_func.Clothes_lib import clothes_items
from descriptor_editor.descriptor_func.Viber_remove_smiles import remove_viber_smiles
from descriptor_editor.descriptor_func.Telegram_remove_smiles import remove_telegram_smiles
from descriptor_editor.descriptor_func.Keywords_to_remove import remove_all_keywords
from descriptor_editor.descriptor_func.add_smiles import replace_smiles
from descriptor_editor.db import DataBase

db = DataBase("database.db")

def description_creater(description: str, manofact) -> str:
    smile = str(db.get_smile(manofact))
    smile += f"–û–ø—Ç, –∫–æ–ª—ñ—Ä —Ç–∞ —Ä–æ–∑–º—ñ—Ä –Ω–∞ –≤–∏–±—ñ—Ä\nüíôüíõviber://chat?number=+380633602671"
    smile = smile.replace("(", "")
    smile = smile.replace(")", "")
    smile = smile.replace("'", "")
    smile = smile.replace(",", "")
    if not isinstance(description, str):
        return

    """Separate with loops string from double|tripple spaces"""
    lower_case = ""
    for i in description.split(" "):
        if i != "":
            lower_case += i + " "

    """Create the universal string 'lower_case' for comfortable using in program"""
    lower_case = lower_case.lower()
    lower_case = remove_telegram_smiles(lower_case)
    lower_case = remove_all_emoji(lower_case)
    lower_case = remove_viber_smiles(lower_case)

    """Creating variable for name of product"""
    name = clothes_items(lower_case.title()).split()
    for item in name:
        if "üîª" in item:
            name = item.strip(",!")
            break
        else:
            name = "üîª–ë–ª—É–∑–∞"

    """Creating variable for model of product"""
    mod = remove_all_keywords(lower_case)
    mod = replace_smiles(mod)
    for item in mod.split("\n"):
        if "üõç" in item:
            mod = item.strip()
            break
        else:
            mod = "üõç–ú–æ–¥: 2807"

    """Creating variable for size of product"""
    size = remove_all_keywords(lower_case)
    size = replace_smiles(size)
    for item in size.split("\n"):
        item = item.strip()
        if "üìê" in item:
            size = item
            break
        else:
            size = "üìê–†–æ–∑–º—ñ—Ä —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π"

    """Creating variable for color of product"""
    color = replace_smiles(lower_case)
    for item in color.split("\n"):
        item = item.strip()
        if "üé®" in item and item.startswith("üé®"):
            color = item.split(",")
            color = ",".join(color).strip()
            color = color.replace("–¶–≤–µ—Ç–∞", "–¶–≤–µ—Ç")
            break
        else:
            color = "üé®–ö–æ–ª—ñ—Ä –Ω–∞ —Ñ–æ—Ç–æ"

    """Creating variable for 'clothe' of product"""
    clothe = remove_all_keywords(lower_case)
    clothe = replace_smiles(clothe)
    for item in clothe.split("\n"):
        if "üß∂" in item:
            clothe = item.strip()
            break
        else:
            clothe = "üß∂–ì–∞—Ä–Ω–∞ —è–∫—ñ—Å—Ç—å"

    """Creating and find the price of our product"""
    price = replace_smiles(lower_case)
    for item in price.split("\n"):
        if "üí∞" in item:
            price = item.strip()
            break

        elif "üí∞" not in item:
            result = price.split("\n")
            for price in result:
                if "–≥—Ä–Ω" in price:
                    result = price
                    break
                elif "–≥—Ä" in price:
                    result = price

            try:
                num_res = re.findall("\d*", result)

                num_res = int("".join(num_res)) + 40
                price = f"üí∞–¶—ñ–Ω–∞: {num_res} –≥—Ä–Ω"
            except:
                price = "üí∞–¶—ñ–Ω–∞ –≤ –ª—Å"
            break
        else:
            price = "üí∞–¶—ñ–Ω–∞ –≤ –ª—Å"


    """Creating the result variable for consistent main description"""
    result = f"{name}\n{mod}\n{size}\n{color}\n{clothe}\n{price}"

    """Creating other variable for additional description"""

    dop_result = remove_telegram_smiles(remove_all_keywords(result.lower().strip())).split("\n")
    some = remove_telegram_smiles(remove_all_keywords(lower_case.lower()).strip()).split("\n")
    other = ""
    for add in some:
        if add.startswith("—Ü—ñ–Ω–∞") or add.startswith("—Ü–µ–Ω–∞"):
            add = ""
        if "–≥—Ä–Ω" in add:
            add = ""
        add = add.replace("–º–æ–¥–µ–ª—å", "–º–æ–¥")
        add = add.replace("–º–∞—Ç–µ—Ä—ñ–∞–ª", "—Ç–∫–∞–Ω–∏–Ω–∞")
        if add.startswith("—Ç–∫–∞–Ω–∏–Ω–∞"):
            add = ""
        add = add.strip()
        if add not in dop_result and add != "":
            other += f"‚ñ™{add.capitalize()}\n"
    if other:
        """Making the concatination of result + some additional description if we need"""

        return f"{result}\n{'-' * 20}\nüí¨–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –æ–ø–∏—Å:\n{'-' * 20}\n{other}{'-' * 20}\n{smile}"
    return f"{result}\n{'-' * 20}\n{smile}"

#
# print(description_creater("""–ù–æ–≤–∏–Ω–∫–∞ üå∑üå∑üå∑üå∑üå∑
# –°—É–∫–Ω—è
# –ú–æ–¥–µ–ª—å ‚Ññ 7276-1
# ‚ùóÔ∏è–û–ë–ú–ï–ñ–ï–ù–ê –ö–Ü–õ–¨–ö–Ü–°–¢–¨ ‚ùóÔ∏è
# –¶—ñ–Ω–∞ : 270 –≥—Ä–Ω.
# –Ø–ö–Ü–°–¢–¨ –í–Ü–î–ú–Ü–ù–ù–ê
# –†–æ–∑–º—ñ—Ä : 46-48; 50-52; 54-56; 58-60
# –¢–∫–∞–Ω–∏–Ω–∞ : –∫—Ä–µ–ø - –∫–æ—Å—Ç—é–º–∫–∞
# –ì–ê–†–ù–ê –†–û–ó–¢–Ø–ñ–ù–Ü–°–¢–¨
# –î–æ–≤–∂–∏–Ω–∞ —Å—É–∫–Ω—ñ : 118 —Å–º.
# –î–æ–≤–∂–∏–Ω–∞ —Ä—É–∫–∞–≤–∞ : 66 —Å–º.
# –°—Ç–∏–ª—å–Ω–∞ , –µ–ª–µ–≥–∞–Ω—Ç–Ω–∞ —Å—É–∫–Ω—è . –¢–∫–∞–Ω–∏–Ω–∞ –ø—Ä–∏—î–º–Ω–∞ –Ω–∞ –¥–æ—Ç–∏–∫ , –≤–∏—Å–æ–∫–æ—ó —è–∫–æ—Å—Ç—ñ , –Ω–µ –∫–∞—à–ª–∞—Ç–∏—Ç—å—Å—è . –°–ø—ñ–¥–Ω–∏—Ü—è —Å—É–∫–Ω—ñ –ø–∏—à–Ω–æ–≥–æ –ø–æ–∫—Ä–æ—é , —Ç–∞–ª—ñ—è –Ω–∞ —Ä–µ–∑–∏–Ω—Ü—ñ ,—Ä—É–∫–∞–≤ –Ω–∞ —Ä–µ–∑–∏–Ω—Ü—ñ ,–ø–æ—è—Å –π–¥–µ –≤ –∫–æ–º–ø–ª–µ–∫—Ç—ñ –∑ –æ—Å–Ω–æ–≤–Ω–æ—ó —Ç–∫–∞–Ω–∏–Ω–∏"""))
